name: üöÄ CI/CD Pipeline to AWS EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üê≥ Build Docker images
      run: |
        # Build with commit SHA for unique tracking
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/testapp:${{ github.sha }} .
        # Build with version tag 2.0 for demo
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/testapp:2.0 .
        # Build with latest tag
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/testapp:latest .

    - name: üì¶ Push to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/testapp:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/testapp:2.0
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/testapp:latest
        echo "‚úÖ Images pushed with tags: ${{ github.sha }}, 2.0, latest"
      
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
    - name: üöÄ Deploy to EC2
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "=== Starting Deployment v2.0 ==="
          
          # Stop and remove old container
          docker stop myapp || true
          docker rm myapp || true
          echo "‚úÖ Old container removed"
          
          # Login to Docker Hub
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          echo "‚úÖ Logged into Docker Hub"
          
          # Pull the new image with version tag 2.0
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/testapp:2.0
          echo "‚úÖ Image testapp:2.0 pulled successfully"
          
          # Run the new container
          docker run -d \
            --name myapp \
            -p 80:5050 \
            ${{ secrets.DOCKERHUB_USERNAME }}/testapp:2.0
          echo "‚úÖ New container started with version 2.0"
          
          # Clean up old images to save space
          docker image prune -f
          echo "‚úÖ Cleaned up old images"
          
          echo "=== Deployment v2.0 Completed Successfully! ==="
          echo "Your app is live at: http://${{ secrets.EC2_HOST }}"
